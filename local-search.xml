<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>算法与数据数据结构C语言实现</title>
    <link href="/2022/10/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/10/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础学习笔记</title>
    <link href="/2022/10/20/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/20/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="从头捡起C语言"><a href="#从头捡起C语言" class="headerlink" title="从头捡起C语言"></a>从头捡起C语言</h2><p>开始刷算法，准备先过一遍数据结构与算法这门课程。发现大部分书籍都是用C语言实现的，而Go语言的书很少有，找到的一些电子书也不够完善，所以重学一遍C语言，先学一遍数据结构与算法，再来系统的刷题。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>全局变量保存在内存的全局存储区中，占用静态的存储单元</li><li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="static关键字的使用"><a href="#static关键字的使用" class="headerlink" title="static关键字的使用"></a>static关键字的使用</h3><ul><li>局部变量的修饰符<br>通常是在某个函数体内，只能在该函数内被调用。<br>这样定义的变量通常被称为局部静态变量，它的值不会因为函数调用的结束而被清除，当函数再次被调用时，它的值是上一次调用结束后的值。<br>局部静态变量存储在静态存储区。</li><li>全局变量的修饰符<br>在某一个文件中，不属于任何一个函数。<br>这样定义的变量通常被称为静态全局变量。</li><li>用于函数的修饰符<br>关键字 static 还可以用于修饰一个函数，这样的函数称之为静态函数。<br>定义一个静态函数就是在函数的返回类型前加上 static 关键字。<br>静态函数的作用域仅限于本文件，不能被其它文件调用。</li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><strong>枚举是c语言的一种基本数据类型</strong></p><p>声明一个枚举类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">enum 枚举名&#123;枚举元素1,枚举元素2...&#125;;<br></code></pre></td></tr></table></figure><p>定义一个枚举变量：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//先声明枚举类型再定义枚举变量</span><br><span class="hljs-keyword">enum</span> 枚举名&#123;枚举元素<span class="hljs-number">1</span>,枚举元素<span class="hljs-number">2.</span>..&#125;;<br><span class="hljs-keyword">enum</span> 枚举名 枚举变量;<br><span class="hljs-keyword">enum</span> DAY &#123;MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN&#125;;<br><span class="hljs-keyword">enum</span> DAY <span class="hljs-built_in">day</span>;<br><span class="hljs-comment">//省略枚举名称，直接定义枚举变量</span><br><span class="hljs-keyword">enum</span> &#123;MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN&#125; <span class="hljs-built_in">day</span>;<br></code></pre></td></tr></table></figure><p>C语言中，不连续的枚举类型无法遍历。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>指针也就是内存地址，指针变量是用来存放内存地址的变量。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明指针变量</span><br>type *p;<br><span class="hljs-comment">//指针变量赋值</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p;<br>p = &amp;a;<br>p -&gt; 一个十六进制内存地址<br>*p -&gt; p存储的十六进制内存地址所对应的值<br></code></pre></td></tr></table></figure><h4 id="C指针的算术运算"><a href="#C指针的算术运算" class="headerlink" title="C指针的算术运算"></a>C指针的算术运算</h4><p><strong>++、–、+、-</strong></p><ul><li><p>指针的每一次递增，它其实会指向下一个元素的存储单元。</p></li><li><p>指针的每一次递减，它都会指向前一个元素的存储单元。</p></li><li><p>指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。</p></li></ul><h4 id="递增一个指针"><a href="#递增一个指针" class="headerlink" title="递增一个指针"></a>递增一个指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> var[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p;<br>p = var;<span class="hljs-comment">/* 指针中的数组地址 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%p\n&quot;</span>,i,p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%d\n&quot;</span>,i,*p);<br><br>p++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递减一个指针"><a href="#递减一个指针" class="headerlink" title="递减一个指针"></a>递减一个指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> var[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p;<br>p = &amp;var[<span class="hljs-number">2</span>];<span class="hljs-comment">/* 指针中最后一个元素的地址 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%p\n&quot;</span>,i,p);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%d\n&quot;</span>,i,*p);<br>  <br>  p--;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h4><p>指针可以使用关系运算符进行比较，例如<span class="label label-primary">==</span>、<span class="label label-primary"><</span>和<span class="label label-primary">></span>。</p><h4 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">//声明一个指针数组<br><span class="hljs-keyword">type</span> *<span class="hljs-keyword">ptr</span>[] = <span class="hljs-meta">&#123;...&#125;</span>;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>字符串实际上是使用空字符 \0 结尾的一维字符数组。因此，\0 是用于标记字符串的结束。</strong></p><p><strong>空字符（Null character</strong>）又称结束符，缩写 <strong>NUL</strong>，是一个数值为 <strong>0</strong> 的控制字符，<strong>\0</strong> 是转义字符，意思是告诉编译器，这不是字符 <strong>0</strong>，而是空字符。</p><p>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符 <strong>\0</strong>，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> site[<span class="hljs-number">7</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> site[] = <span class="hljs-string">&quot;RUNOOB&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="操作字符串的函数"><a href="#操作字符串的函数" class="headerlink" title="操作字符串的函数"></a>操作字符串的函数</h4><div class="note note-info">            <p><strong>strcpy(s1, s2);</strong></p><p>复制字符串 s2 到字符串 s1</p>          </div><div class="note note-info">            <p><strong>strcat(s1, s2);</strong></p><p>连接字符串 s2 到字符串 s1 的末尾</p>          </div><div class="note note-info">            <p><strong>strlen(s1);</strong></p><p>返回字符串 s1 的长度</p>          </div><div class="note note-info">            <p><strong>strcmp(s1,s2);</strong></p><p>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</p>          </div><div class="note note-info">            <p><strong>strchr(s1,ch);</strong></p><p>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。(截取ch及后面的字符)</p>          </div><div class="note note-info">            <p><strong>strstr(s1,s2);</strong></p><p>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</p>          </div><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p><strong>C 数组允许定义可存储相同类型数据项的变量，结构是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</strong></p><h4 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h4><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">struct tag &#123; <br><span class="hljs-code">    member-list</span><br><span class="hljs-code">    member-list </span><br><span class="hljs-code">    member-list  </span><br><span class="hljs-code">    ...</span><br><span class="hljs-code">&#125; variable-list ;</span><br><span class="hljs-code">//tag 是结构体标签。</span><br><span class="hljs-code">//member-list 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。</span><br><span class="hljs-code">//variable-list 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span>&#123;</span><br><span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> book_id;<br>&#125; book;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo fluid个人使用笔记</title>
    <link href="/2022/10/20/hexo-fluid%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/20/hexo-fluid%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>在Hexo+Fiuld主题搭建的个人博客使用过程中，根据用户手册，记录一些个人使用笔记。</strong></p><h3 id="修改页面图片"><a href="#修改页面图片" class="headerlink" title="修改页面图片"></a>修改页面图片</h3><p>在<code>_config.fluid.yml</code>文件中，修改对应页面的<code>banner_img</code>，图片需要保存在<code>/source/img</code>文件夹下。</p><h3 id="关闭版权声明"><a href="#关闭版权声明" class="headerlink" title="关闭版权声明"></a>关闭版权声明</h3><p>轻度强迫症，感觉文章下面的版权声明看着十分难受，就关掉了</p><p><img src="/img/post_img/5-1.png"></p><p>在<code>_config.fluid.yml</code>文件中，<code>copyright</code>的<code>enable</code>改为<code>false</code></p><h3 id="关闭终端运行hexo命令时的效果"><a href="#关闭终端运行hexo命令时的效果" class="headerlink" title="关闭终端运行hexo命令时的效果"></a>关闭终端运行hexo命令时的效果</h3><p>关闭如下效果</p><p><img src="/img/post_img/5-2.png"></p><p>将博客目录文件夹的<code>node_modules/hexo-theme-fluid/scripts/events/lib/hello.js</code>文件中的对应效果删除即可</p><h3 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h3><p><strong>便签</strong></p><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选便签：</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><p><strong>行内标签</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选Label</p><span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span><span class="label label-success">success</span> <span class="label label-warning">warning</span> <span class="label label-danger">danger</span>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fiuld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用图片作为文章标题</title>
    <link href="/2022/10/19/%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%E4%BD%9C%E4%B8%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/"/>
    <url>/2022/10/19/%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%E4%BD%9C%E4%B8%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fiuld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu搭建Jenkins环境自动发布Go项目</title>
    <link href="/2022/10/19/ubuntu%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Go%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/19/ubuntu%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Go%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="ubuntu搭建Jenkins环境"><a href="#ubuntu搭建Jenkins环境" class="headerlink" title="ubuntu搭建Jenkins环境"></a>ubuntu搭建Jenkins环境</h3><ul><li>安装Java<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt update<br>$ sudo apt install openjdk-11-jdk<br>$ java -version<br>//自Jenkins 2.357 和 LTS 2.361.1 起，Jenkins 需要 Java 11 或 17<br></code></pre></td></tr></table></figure></li></ul><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>]]></content>
    
    
    <categories>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>Golang</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用Fluid主题</title>
    <link href="/2022/10/19/hexo%E4%BD%BF%E7%94%A8Fluid%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/10/19/hexo%E4%BD%BF%E7%94%A8Fluid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 <a href="https://github.com/fluid-dev">Fluid-dev (opens new window)</a>负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>预览网站：<a href="https://hexo.fluid-dev.com/">Fluid’s blog (opens new window)</a><a href="https://zkqiang.cn/">zkqiang’s blog</a></p><h3 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建hexo博客</h3><p>先安装hexo，搭建hexo博客网站</p><h3 id="获取主题"><a href="#获取主题" class="headerlink" title="获取主题"></a>获取主题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h3 id="选择hexo主题"><a href="#选择hexo主题" class="headerlink" title="选择hexo主题"></a>选择hexo主题</h3><p>如下修改Hexo博客目录中的的<code>_config.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment">#指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment">#指定语言</span><br></code></pre></td></tr></table></figure><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo n page about<br></code></pre></td></tr></table></figure><p>然后修改<code>/source/about/index.md</code>文件，添加<code>layout</code>属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里填写你想在about页展示的内容</span><br></code></pre></td></tr></table></figure><blockquote><p>WARNING</p><p><code>layout: about</code>必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p><strong>方式一</strong></p><blockquote><p>适用于通过npm安装主题</p></blockquote><p>在博客目录下执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p><strong>方式二</strong></p><blockquote><p>适用于通过Release压缩包安装主题，且没有自行修改任何代码的情况</p></blockquote><ol><li>先将原文件夹重命名为别的名称，例如 <code>fluid-bkp</code>，用于升级失败进行回退；</li><li>按照安装步骤，重新下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">release (opens new window)</a>并解压重命名为 <code>fluid</code>；</li><li>如果某些配置发生了变化（改名或弃用），release 的说明里会特别提示，同步修改原配置文件即可。</li></ol><p><strong>方式三</strong></p><blockquote><p>适用于自定义了一些代码 ，或想体验其他分支的情况，以 dev 分支为例。</p></blockquote><ol><li><p>确定自己的 fluid 目录已经开启 git，并且所有改动都已 commit；</p></li><li><p>把 fluid 仓库的 develop 分支拉取到自己当前的分支上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git pull https://github.com/fluid-dev/hexo-theme-fluid.git develop<br></code></pre></td></tr></table></figure></li><li><p>解决代码冲突，保留自己修改的部分</p></li></ol><p>​                                                                         文章来源：<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fiuld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/19/hello-world/"/>
    <url>/2022/10/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客～</p><p>今天是第一天写博客，以后会争取每天写写博客，记录自己的编程成长过程、学习感悟～</p><h2 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h2><p>搭建博客网站使用的是hexo</p><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Postname&quot;</span> 或 $ hexo n <span class="hljs-string">&quot;My New Postname&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server 或 $ hexo s<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate 或 $ hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy 或 $ hexo d<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean 或 $ hexo c<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
