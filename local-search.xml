<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>iterm2命令</title>
    <link href="/2023/02/22/iterm2%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/02/22/iterm2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="iterm2命令"><a href="#iterm2命令" class="headerlink" title="iterm2命令"></a>iterm2命令</h2><h3 id="mac配置iterm2"><a href="#mac配置iterm2" class="headerlink" title="mac配置iterm2"></a><a href="https://juejin.cn/post/6844904144277340168">mac配置iterm2</a></h3><p><a href="https://zhuanlan.zhihu.com/p/435518571">参考文章</a></p><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">command</span> + enter 进入与返回全屏模式<br><span class="hljs-built_in">command</span> + t 新建标签<br><span class="hljs-built_in">command</span> + w 关闭标签<br><span class="hljs-built_in">command</span> + 数字 <span class="hljs-built_in">command</span> + 左右方向键    切换标签<br><span class="hljs-built_in">command</span> + enter 切换全屏<br><span class="hljs-built_in">command</span> + f 查找<br><span class="hljs-built_in">command</span> + d 水平分屏<br><span class="hljs-built_in">command</span> + <span class="hljs-built_in">shift</span> + d 垂直分屏<br><span class="hljs-built_in">command</span> + option + 方向键 <span class="hljs-built_in">command</span> + [ 或 <span class="hljs-built_in">command</span> + ]    切换屏幕<br><span class="hljs-built_in">command</span> + ; 查看历史命令<br><span class="hljs-built_in">command</span> + <span class="hljs-built_in">shift</span> + h 查看剪贴板历史<br>ctrl + u    清除当前行<br>ctrl + l    清屏<br>ctrl + a    到行首<br>ctrl + e    到行尾<br>ctrl + f/b  前进后退<br>ctrl + p    上一条命令<br>ctrl + r    搜索命令历史<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>iterm2</tag>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>brew使用命令</title>
    <link href="/2023/02/22/brew%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/02/22/brew%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="brew使用命令"><a href="#brew使用命令" class="headerlink" title="brew使用命令"></a>brew使用命令</h2><ul><li>查看brew的帮助</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew –<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><ul><li>安装软件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install git<br></code></pre></td></tr></table></figure><ul><li>卸载软件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew uninstall git<br></code></pre></td></tr></table></figure><ul><li>搜索软件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew search git<br></code></pre></td></tr></table></figure><ul><li>显示已经安装软件列表</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew list<br></code></pre></td></tr></table></figure><ul><li>更新软件，把所有的Formula目录更新，并且会对本机已经安装并有更新的软件用*标明</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew update<br></code></pre></td></tr></table></figure><ul><li>更新某具体软件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew upgrade git<br></code></pre></td></tr></table></figure><ul><li>显示软件内容信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew info git<br></code></pre></td></tr></table></figure><ul><li>用浏览器打开</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew home<br></code></pre></td></tr></table></figure><ul><li>显示包依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew deps <br></code></pre></td></tr></table></figure><ul><li>显示包的依赖树</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew deps --installed --tree<br></code></pre></td></tr></table></figure><ul><li>启动web服务器，可以通过浏览器访问<a href="http://localhost:4567/">http://localhost:4567/</a> 来同网页来管理包</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew server<br></code></pre></td></tr></table></figure><ul><li>删除程序，和upgrade一样，单个软件删除和所有程序老版删除</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew cleanup git <br>brew cleanup<br></code></pre></td></tr></table></figure><ul><li>查看那些已安装的程序需要更新</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew outdated<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>brew</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql、gorm笔记</title>
    <link href="/2023/02/14/mysql%E3%80%81gorm%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/02/14/mysql%E3%80%81gorm%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql、gorm笔记"><a href="#mysql、gorm笔记" class="headerlink" title="mysql、gorm笔记"></a>mysql、gorm笔记</h2><h3 id="mysql基本操作"><a href="#mysql基本操作" class="headerlink" title="mysql基本操作"></a>mysql基本操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user (<br>id int not null auto_increment comment &#x27;主键&#x27;,<br>name varchar(10) not null default &#x27;&#x27; comment &#x27;姓名&#x27;,<br>password varchar(50) not null default &#x27;123&#x27; comment &#x27;密码，默认值为123&#x27;,<br>gender char(3) default &#x27;0&#x27; check (gender in(&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;)) comment &#x27;性别，0:未知 1:男 2:女&#x27;,<br>phone varchar(11) default &#x27;&#x27; comment &#x27;11位手机号码&#x27;,<br>email varchar(128) default &#x27;&#x27; comment &#x27;邮箱&#x27;,<br>identity varchar(128) default &#x27;&#x27; comment &#x27;身份证号&#x27;,<br>client_ip varchar(128) default &#x27;&#x27; comment &#x27;连接ip地址&#x27;,<br>client_post varchar(128) default &#x27;&#x27; comment &#x27;连接端口号&#x27;,<br>login_time datetime(3) default now(3) comment &#x27;登陆时间&#x27;,<br>logout_time datetime(3) default now(3) comment &#x27;下线时间&#x27;,<br>is_login tinyint(1) default 0 comment &#x27;在线状态，0:离线 1:在线&#x27;,<br>heartbeat_time varchar(128) default &#x27;&#x27; comment &#x27;心跳速率&#x27;,<br>device_info varchar(128) default &#x27;&#x27; comment &#x27;设备信息&#x27;,<br>created_at datetime(3) default null comment &#x27;创建时间&#x27;,<br>updated_at datetime(3) default null comment &#x27;更新时间&#x27;,<br>deleted_at datetime(3) default null comment &#x27;删除时间&#x27;,<br>primary key (id)<br>)engine=InnoDB default charset=utf8;<br></code></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table table_name;<br></code></pre></td></tr></table></figure><h3 id="修改表信息"><a href="#修改表信息" class="headerlink" title="修改表信息"></a>修改表信息</h3><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table table_oldname rename to table_newname;<br>eg: alter table user rename to user_info;<br></code></pre></td></tr></table></figure><h4 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table table_name change field_oldname field_newname type;<br>eg: alter table user change is_login is_logout tinyint(1);<br></code></pre></td></tr></table></figure><h4 id="修改字段属性"><a href="#修改字段属性" class="headerlink" title="修改字段属性"></a>修改字段属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table table_name modify column fieldname type not null default &#x27;&#x27; comment &#x27;字段信息&#x27;;<br>eg: alter table user modify column name varchar(128) not null default &#x27;&#x27; comment &#x27;姓名&#x27;;<br></code></pre></td></tr></table></figure><h4 id="显示表全部信息"><a href="#显示表全部信息" class="headerlink" title="显示表全部信息"></a>显示表全部信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table table_name;<br></code></pre></td></tr></table></figure><h4 id="设置性别约束"><a href="#设置性别约束" class="headerlink" title="设置性别约束"></a>设置性别约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user(<br>...<br>gender char(3) default &#x27;0&#x27; check (gender in(&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;)) comment &#x27;性别，0:未知 1:男 2:女&#x27;,<br>...<br>);<br></code></pre></td></tr></table></figure><h3 id="gorm"><a href="#gorm" class="headerlink" title="gorm"></a>gorm</h3><h4 id="gorm映射mysql数据表"><a href="#gorm映射mysql数据表" class="headerlink" title="gorm映射mysql数据表"></a>gorm映射mysql数据表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TableName <span class="hljs-keyword">struct</span>&#123;<br>    ID            <span class="hljs-type">int</span>       <span class="hljs-string">`json:&quot;id&quot; gorm:&quot;column:id;primaryKey;autoIncrement;comment:自增主键id&quot;`</span><br>    Name          <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;name&quot; gorm:&quot;column:name;comment:用户姓名&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>go在使用结构体映射mysql数据表时：column来对应mysql表中中的字段名，primaryKey对应主键，autoIncrement对应自增属性，comment对应字段注释，index对应索引。</p><p>还有size、not null、default等属性也可以一一对应</p><p>eg: <code>gorm:&quot;column:id;size:4;primaryKey;autoIncrement;not null;default:0;comment:自增主键id;index:index_name&quot;</code></p></blockquote><div class="note note-info">            <p>使用gorm时，进行修改增改操作时，尽量重新声明结构体来进行操作，和查询使用结构体分离开来。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>mysql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>gorm</tag>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建go-gin框架模版</title>
    <link href="/2023/01/31/%E6%90%AD%E5%BB%BAgo-gin%E6%A1%86%E6%9E%B6%E6%A8%A1%E7%89%88/"/>
    <url>/2023/01/31/%E6%90%AD%E5%BB%BAgo-gin%E6%A1%86%E6%9E%B6%E6%A8%A1%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="搭建go-gin框架模版"><a href="#搭建go-gin框架模版" class="headerlink" title="搭建go-gin框架模版"></a>搭建go-gin框架模版</h2><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="新建一个gin-model文件夹"><a href="#新建一个gin-model文件夹" class="headerlink" title="新建一个gin-model文件夹"></a>新建一个gin-model文件夹</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir gin-model<br></code></pre></td></tr></table></figure><h4 id="初始化go-mod"><a href="#初始化go-mod" class="headerlink" title="初始化go mod"></a>初始化go mod</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> mod init github.com/xxx/gin-model<br></code></pre></td></tr></table></figure><h4 id="新建一个main-go程序"><a href="#新建一个main-go程序" class="headerlink" title="新建一个main.go程序"></a>新建一个main.go程序</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd gin-model<br>touch main.go<br></code></pre></td></tr></table></figure><p><strong>在编辑器中打开gin-model文件夹</strong></p><h4 id="安装Gin框架的库"><a href="#安装Gin框架的库" class="headerlink" title="安装Gin框架的库"></a>安装Gin框架的库</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get -u github.com/gin-gonic/gin<br></code></pre></td></tr></table></figure><p><strong>main.go</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/gookit/slog&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := gin.Default()<br>r.GET(<span class="hljs-string">&quot;/ping&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World!&quot;</span>,<br>&#125;)<br>&#125;)<br>r.Run()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>启动项目&amp;&amp;测试</strong></p><p>打开<code>http://localhost:8080/ping</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Hello World!&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="配置初始化-amp-全局变量"><a href="#配置初始化-amp-全局变量" class="headerlink" title="配置初始化&amp;全局变量"></a>配置初始化&amp;全局变量</h3><p><strong>使用 <a href="https://link.juejin.cn/?target=https://github.com/spf13/viper">viper</a> 作为配置管理方案，支持 JSON、TOML、YAML、HCL、envfile、Java properties 等多种格式的配置文件，并且能够监听配置文件的修改，进行热重载。</strong></p><h4 id="安装viper库"><a href="#安装viper库" class="headerlink" title="安装viper库"></a>安装viper库</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get -u github.com/spf13/viper<br></code></pre></td></tr></table></figure><h4 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h4><p>在<code>gin-model</code>文件夹下新建<code>config</code>文件夹，在<code>config</code>文件夹下新建<code>config.yaml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">config:</span> <span class="hljs-comment"># 项目基本配置</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-comment"># local开发环境 test测试环境</span><br>    <span class="hljs-attr">env:</span> <span class="hljs-string">local</span> <br>    <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> <span class="hljs-comment"># 服务监听端口号</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gin-model</span> <span class="hljs-comment"># 项目名称</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">http://localhost</span> <span class="hljs-comment"># 项目域名</span><br>  <span class="hljs-attr">database:</span><br>    <span class="hljs-comment"># 数据库类型 mysql，sqlite3， postgres</span><br>    <span class="hljs-attr">driver:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-comment"># 数据库连接字符串 mysql</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">root:12345678@tcp(127.0.0.1:3306)/test?charset=utf8&amp;parseTime=True&amp;loc=Local&amp;timeout=1000ms</span><br></code></pre></td></tr></table></figure><h4 id="编写配置结构体"><a href="#编写配置结构体" class="headerlink" title="编写配置结构体"></a>编写配置结构体</h4><p>在<code>gin-model</code>文件夹下新建<code>common</code>文件夹，在<code>common</code>下新建<code>config</code>文件夹，用于存放所有配置对应的结构体。</p><p>在<code>/common/config</code>路径下新建<code>config.go</code>文件，定义<code>Config</code>结构体，其<code>Settings</code>属性对应<code>config.yaml</code>中的<code>settings</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> config<br><br><span class="hljs-comment">// config.yaml文件中的基本配置</span><br><span class="hljs-keyword">type</span> Config <span class="hljs-keyword">struct</span> &#123;<br>Settings Settings <span class="hljs-string">`mapstructure:&quot;settings&quot; json:&quot;settings&quot; yaml:&quot;settings&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义<code>Settings</code>结构体，其<code>Application</code>属性对应<code>config.yaml</code>中的<code>application</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> config<br><br><span class="hljs-comment">// 对应config.yaml文件中的settings</span><br><span class="hljs-keyword">type</span> Settings <span class="hljs-keyword">struct</span> &#123;<br>Application Application <span class="hljs-string">`mapstructure:&quot;application&quot; json:&quot;application&quot; yaml:&quot;application&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>定义 <code>Application</code> 结构体，其所有属性分别对应 <code>config.yaml</code> 中 <code>application</code> 下的所有配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> config<br><br><span class="hljs-comment">// 对应config.yaml文件中的application</span><br><span class="hljs-keyword">type</span> Application <span class="hljs-keyword">struct</span> &#123;<br>Env  <span class="hljs-type">string</span> <span class="hljs-string">`mapstructure:&quot;env&quot; json:&quot;env&quot; yaml:&quot;env&quot;`</span><br>Port <span class="hljs-type">string</span> <span class="hljs-string">`mapstructure:&quot;port&quot; json:&quot;port&quot; yaml:&quot;port&quot;`</span><br>Name <span class="hljs-type">string</span> <span class="hljs-string">`mapstructure:&quot;name&quot; json:&quot;name&quot; yaml:&quot;name&quot;`</span><br>Url  <span class="hljs-type">string</span> <span class="hljs-string">`mapstructure:&quot;url&quot; json:&quot;url&quot; yaml:&quot;url&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-danger">            <p>配置结构体中 <code>mapstructure</code> 标签需对应 <code>config.yaml</code> 中的配置名称， <code>viper</code> 会根据标签 value 值把 <code>config.yaml</code> 的数据赋予给结构体</p>          </div><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在<code>/common</code>路径下新建<code>/global/app.go</code>，定义<code>Application</code>结构体，用来存放一些项目启动时的变量，便于调用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> global<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/iyaoo/go/gin-model/common/config&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> Application <span class="hljs-keyword">struct</span> &#123;<br>ConfigViper *viper.Viper<br>Config      config.Config<br>&#125;<br><br><span class="hljs-keyword">var</span> App = <span class="hljs-built_in">new</span>(Application)<br></code></pre></td></tr></table></figure><h4 id="使用-viper-载入配置"><a href="#使用-viper-载入配置" class="headerlink" title="使用 viper 载入配置"></a>使用 viper 载入配置</h4><p>在<code>common</code>路径下新建<code>bootstrap/config.go</code> 文件，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> bootstrap<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br><br><span class="hljs-string">&quot;github.com/fsnotify/fsnotify&quot;</span><br><span class="hljs-string">&quot;github.com/iyaoo/go/gin-model/common/global&quot;</span><br><span class="hljs-string">&quot;github.com/spf13/viper&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">InitConfig</span><span class="hljs-params">()</span></span> *viper.Viper &#123;<br><span class="hljs-comment">// 设置配置路径</span><br>configFile := <span class="hljs-string">&quot;config/config.yaml&quot;</span><br><span class="hljs-comment">// 生产环境可以通过设置环境变量来改变配置文件路径</span><br><span class="hljs-keyword">if</span> configEnv := os.Getenv(<span class="hljs-string">&quot;VIPER_CONFIG&quot;</span>); configEnv != <span class="hljs-string">&quot;&quot;</span> &#123;<br>configFile = configEnv<br>&#125;<br><br><span class="hljs-comment">//初始化 viper</span><br>v := viper.New()<br>v.SetConfigFile(configFile)<br>v.SetConfigType(<span class="hljs-string">&quot;yaml&quot;</span>)<br><span class="hljs-keyword">if</span> err := v.ReadInConfig(); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(fmt.Errorf(<span class="hljs-string">&quot;read config failed: %s&quot;</span>, err))<br>&#125;<br><br><span class="hljs-comment">//监听配置文件</span><br>v.WatchConfig()<br>v.OnConfigChange(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(in fsnotify.Event)</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;config file changed:&quot;</span>, in.Name)<br><span class="hljs-comment">//重载配置</span><br><span class="hljs-keyword">if</span> err := v.Unmarshal(&amp;global.App.Config); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>&#125;)<br><span class="hljs-comment">// 将配置赋值给全局变量</span><br><span class="hljs-keyword">if</span> err := v.Unmarshal(&amp;global.App.Config); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><br><span class="hljs-keyword">return</span> v<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h4><p>修改<code>main.go</code>文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/iyaoo/go/gin-model/common/bootstrap&quot;</span><br><span class="hljs-string">&quot;github.com/iyaoo/go/gin-model/common/global&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseGin</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">//初始化配置</span><br>bootstrap.InitConfig()<br><br>r := gin.Default()<br><br><span class="hljs-comment">//测试路由</span><br>r.GET(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>c.JSON(<span class="hljs-number">200</span>, gin.H&#123;<br><span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hello World!&quot;</span>,<br>&#125;)<br>&#125;)<br><br><span class="hljs-comment">//启动服务器</span><br>r.Run(<span class="hljs-string">&quot;:&quot;</span> + global.App.Config.Settings.Application.Port)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>UseGin()<br>&#125;<br></code></pre></td></tr></table></figure><p>执行<code>go run main.go</code>,项目启动后，服务器监听的端口为配置文件中的端口号。</p><h3 id="日志初始化"><a href="#日志初始化" class="headerlink" title="日志初始化"></a>日志初始化</h3><p>日志是框架中必不可少的，平时代码调试，线上 Bug 分析都离不开它。这里将使用 <a href="https://github.com/gookit/slog">slog</a> 作为日志库。</p><h4 id="安装slog库"><a href="#安装slog库" class="headerlink" title="安装slog库"></a>安装slog库</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get -u github.com/gookit/slog<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>gin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go语言的slog日志库</title>
    <link href="/2023/01/31/go%E8%AF%AD%E8%A8%80%E7%9A%84slog%E6%97%A5%E5%BF%97%E5%BA%93/"/>
    <url>/2023/01/31/go%E8%AF%AD%E8%A8%80%E7%9A%84slog%E6%97%A5%E5%BF%97%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="go语言中的slog日志库"><a href="#go语言中的slog日志库" class="headerlink" title="go语言中的slog日志库"></a>go语言中的slog日志库</h2><h3 id="下载安装slog库"><a href="#下载安装slog库" class="headerlink" title="下载安装slog库:"></a>下载安装slog库:</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(<br>  <span class="hljs-string">&quot;github.com/gookit/slog&quot;</span><br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/2023/01/31/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/01/31/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><p><strong>轻量标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag v1.0.0<br></code></pre></td></tr></table></figure><p><strong>附注标签</strong>（为附注标签指定一条信息）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag -a v1.0.0 -m &#x27;version 1.0.0&#x27;<br></code></pre></td></tr></table></figure><p><strong>后期打标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">获取历史提交记录：<br>git log --pretty=oneline<br>补上标签：<br>git tag -a v1.0.0 9fceb02(校验和)<br></code></pre></td></tr></table></figure><p><strong>列出标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag<br>git tag -l<br>git tag --list<br></code></pre></td></tr></table></figure><p><strong>推送标签到github</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin tag<br>git push origin --tags--推送多个标签<br></code></pre></td></tr></table></figure><p><strong>删除标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag -d v1.0.0    --删除本地标签<br>git push origin --delete v1.0.0    --删除远程标签<br>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;    --删除远程标签<br></code></pre></td></tr></table></figure><p><strong>检出标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git checkout v1.0.0<br></code></pre></td></tr></table></figure><h3 id="忽略某些不想提交的文件"><a href="#忽略某些不想提交的文件" class="headerlink" title="忽略某些不想提交的文件"></a>忽略某些不想提交的文件</h3><p><strong>在项目目录下创建.gitignore文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim .gitignore<br></code></pre></td></tr></table></figure><p>添加忽略的文件名或后缀</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs txt">.idea<br>.gitignore<br>*.iml<br></code></pre></td></tr></table></figure><p><strong>忽略文件已上传解决办法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git"># 删除缓存<br>git rm -r --cache .<br><br># 查看状态<br>git status<br><br># 将更改提交到本地暂存区 <br>git add .<br><br># 提交本地库<br>git commit -m &#x27;忽略 .idea .gitignore *.iml&#x27;<br><br># 上传服务器<br>git push origin main<br></code></pre></td></tr></table></figure><h3 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git"># 撤销commit<br>git reset --soft HEAD^<br><br># 修改commit注释<br>git commit --amend<br></code></pre></td></tr></table></figure><p><strong>参数</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git"># --mixed<br>不删除工作空间改动代码，撤销commit，并且撤销git add . 操作<br>这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的<br><br># --soft<br>不删除工作空间改动代码，撤销commit，不撤销git add . <br><br># --hard<br>删除工作空间改动代码，撤销commit，撤销git add . <br>注意完成这个操作后，就恢复到了上一次的commit状态<br><br># HEAD^<br>HEAD^的意思是上一个版本，也可以写成HEAD~1<br>如果进行了2次commit，想都撤回，可以使用HEAD~2<br></code></pre></td></tr></table></figure><h3 id="恢复到指定版本"><a href="#恢复到指定版本" class="headerlink" title="恢复到指定版本"></a>恢复到指定版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git"># 查看提交日志<br>git log<br><br># 恢复到指定版本<br>git reset --hard 版本号<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go读写csv文件</title>
    <link href="/2023/01/30/go%E8%AF%BB%E5%86%99csv%E6%96%87%E4%BB%B6/"/>
    <url>/2023/01/30/go%E8%AF%BB%E5%86%99csv%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="go读写csv文件"><a href="#go读写csv文件" class="headerlink" title="go读写csv文件"></a>go读写csv文件</h2><h3 id="使用依赖库"><a href="#使用依赖库" class="headerlink" title="使用依赖库"></a>使用依赖库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(<br>  <span class="hljs-string">&quot;encoding/csv&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p><strong>打开一个csv文件并声明一个csv.Reader对象</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">file, err := os.Open(<span class="hljs-string">&quot;foo.csv&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br>reader := csv.NewReader(file)<br></code></pre></td></tr></table></figure><p><strong>使用<code>csv.Reader.Read</code>来读取一行数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">row, err := reader.Read()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>fmt.Println(row)<br></code></pre></td></tr></table></figure><p><strong>使用<code>csv.Reader.ReadAll</code>读取所有行</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">rows, err := reader.ReadAll()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> rows &#123;<br>fmt.Println(v)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p><strong>创建一个csv文件并声明一个<code>csv.NewWriter</code>对象</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">file, err := os.Create(<span class="hljs-string">&quot;test.csv&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br>writer := csv.NewWriter(file)<br></code></pre></td></tr></table></figure><p><strong>控制csv文件中的字段分隔符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">write.Comma = <span class="hljs-string">&#x27;,&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>使用<code>csv.Writer.Write</code>来写入一行数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">err = write.Write([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;nihao&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>调用<code>csv.Writer.Flush</code>才能完成将数据写入文件中</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">write.Flush()<br></code></pre></td></tr></table></figure><p><strong>使用<code>csv.Writer.WriteAll</code>来进行多行写入</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">err = write.WriteAll([][]<span class="hljs-type">string</span>&#123;<br>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;line1&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;line2&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;line3&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>write.Flush()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
      <tag>csv文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux常用命令随记</title>
    <link href="/2023/01/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/01/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux系统中常用的终端命令"><a href="#Linux系统中常用的终端命令" class="headerlink" title="Linux系统中常用的终端命令"></a>Linux系统中常用的终端命令</h2><h4 id="删除：rm"><a href="#删除：rm" class="headerlink" title="删除：rm"></a>删除：rm</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf abc/def.log<br>rm -f abc/def.log<br>删除多个文件:<br>rm -rf abc/a.txt abc/b.txt<br></code></pre></td></tr></table></figure><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul><h4 id="复制：cp"><a href="#复制：cp" class="headerlink" title="复制：cp"></a>复制：cp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">将当前目录test/下的所有文件复制到新目录newtest下:<br>cp -r test/ newtest<br></code></pre></td></tr></table></figure><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与 <strong>-f</strong> 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 <strong>y</strong> 时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul><div class="note note-danger">            <p>用户使用该指令复制目录时，必须使用参数 <strong>-r</strong> 或者 <strong>-R</strong> 。</p>          </div><h4 id="重命名与移动：mv"><a href="#重命名与移动：mv" class="headerlink" title="重命名与移动：mv"></a>重命名与移动：mv</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">将原文件名改为新文件名:<br>mv old_name(文件) new_name(文件)<br>将file_name文件移动到directory目录中:<br>mv file_name(文件) directory(目录)<br>若new_directory目录不存在，将old_directory重命名为new_directory;若new_directory目录已存在，将old_directory移动到new_directory目录下:<br>mv old_directory(目录) new_directory(目录)<br></code></pre></td></tr></table></figure><ul><li><strong>-b</strong>: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。</li><li><strong>-i</strong>: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。</li><li><strong>-f</strong>: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。</li><li><strong>-n</strong>: 不要覆盖任何已存在的文件或目录。</li><li><strong>-u</strong>：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</li></ul><h4 id="服务器与本地计算机之间互相传送文件：scp"><a href="#服务器与本地计算机之间互相传送文件：scp" class="headerlink" title="服务器与本地计算机之间互相传送文件：scp"></a>服务器与本地计算机之间互相传送文件：scp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">远程服务器-&gt;本地:<br>scp ubuntu@xx.xxx.xxx.xx:/home/ubuntu/a.log /home/space<br>本地-&gt;远程服务器:<br>scp /home/space/a.txt ubuntu@xx.xxx.xxx.xx:/home/ubuntu/space<br></code></pre></td></tr></table></figure><h4 id="新建文件、文件夹"><a href="#新建文件、文件夹" class="headerlink" title="新建文件、文件夹"></a>新建文件、文件夹</h4><p><strong>touch、mkdir</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">touch file.txt    --新建.txt文件<br>mkdir file    --新建文件夹<br></code></pre></td></tr></table></figure><p><strong>重定向操作符创建文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">file.txt    --文件不存在则创建，存在则覆盖</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt; file.txt    --文件不存在则创建，存在则添加到已存在的文件中</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习、使用笔记</title>
    <link href="/2022/10/27/docker%E5%AD%A6%E4%B9%A0%E3%80%81%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/27/docker%E5%AD%A6%E4%B9%A0%E3%80%81%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="docker学习、使用笔记"><a href="#docker学习、使用笔记" class="headerlink" title="docker学习、使用笔记"></a>docker学习、使用笔记</h2><p><a href="https://zhuanlan.zhihu.com/p/576172727">参考网站</a></p><p><a href="https://zhuanlan.zhihu.com/p/26418829">使用docker部署一个Web应用</a></p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux查看进程</title>
    <link href="/2022/10/27/Linux%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B/"/>
    <url>/2022/10/27/Linux%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Linux查看进程命令"><a href="#Linux查看进程命令" class="headerlink" title="Linux查看进程命令"></a>Linux查看进程命令</h3>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmux工具</title>
    <link href="/2022/10/26/Tmux%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/10/26/Tmux%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="Tmux工具的学习使用"><a href="#Tmux工具的学习使用" class="headerlink" title="Tmux工具的学习使用"></a>Tmux工具的学习使用</h2><p>在服务器上测试demo的时候，需要后台挂起服务，方便查看项目运行情况，学习了一下tmux。</p><p>参考网站：<a href="https://zhuanlan.zhihu.com/p/102546608">知乎</a>、<a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">阮一峰的博客</a></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>Tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据数据结构C语言实现</title>
    <link href="/2022/10/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/10/24/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础学习笔记</title>
    <link href="/2022/10/20/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/20/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="从头捡起C语言"><a href="#从头捡起C语言" class="headerlink" title="从头捡起C语言"></a>从头捡起C语言</h2><p>开始刷算法，准备先过一遍数据结构与算法这门课程。发现大部分书籍都是用C语言实现的，而Go语言的书很少有，找到的一些电子书也不够完善，所以重学一遍C语言，先学一遍数据结构与算法，再来系统的刷题。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>全局变量保存在内存的全局存储区中，占用静态的存储单元</li><li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="static关键字的使用"><a href="#static关键字的使用" class="headerlink" title="static关键字的使用"></a>static关键字的使用</h3><ul><li>局部变量的修饰符<br>通常是在某个函数体内，只能在该函数内被调用。<br>这样定义的变量通常被称为局部静态变量，它的值不会因为函数调用的结束而被清除，当函数再次被调用时，它的值是上一次调用结束后的值。<br>局部静态变量存储在静态存储区。</li><li>全局变量的修饰符<br>在某一个文件中，不属于任何一个函数。<br>这样定义的变量通常被称为静态全局变量。</li><li>用于函数的修饰符<br>关键字 static 还可以用于修饰一个函数，这样的函数称之为静态函数。<br>定义一个静态函数就是在函数的返回类型前加上 static 关键字。<br>静态函数的作用域仅限于本文件，不能被其它文件调用。</li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><strong>枚举是c语言的一种基本数据类型</strong></p><p>声明一个枚举类型：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">enum 枚举名&#123;枚举元素1,枚举元素2...&#125;;<br></code></pre></td></tr></table></figure><p>定义一个枚举变量：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//先声明枚举类型再定义枚举变量</span><br><span class="hljs-keyword">enum</span> 枚举名&#123;枚举元素<span class="hljs-number">1</span>,枚举元素<span class="hljs-number">2.</span>..&#125;;<br><span class="hljs-keyword">enum</span> 枚举名 枚举变量;<br><span class="hljs-keyword">enum</span> DAY &#123;MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN&#125;;<br><span class="hljs-keyword">enum</span> DAY <span class="hljs-built_in">day</span>;<br><span class="hljs-comment">//省略枚举名称，直接定义枚举变量</span><br><span class="hljs-keyword">enum</span> &#123;MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN&#125; <span class="hljs-built_in">day</span>;<br></code></pre></td></tr></table></figure><p>C语言中，不连续的枚举类型无法遍历。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>指针也就是内存地址，指针变量是用来存放内存地址的变量。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明指针变量</span><br>type *p;<br><span class="hljs-comment">//指针变量赋值</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p;<br>p = &amp;a;<br>p -&gt; 一个十六进制内存地址<br>*p -&gt; p存储的十六进制内存地址所对应的值<br></code></pre></td></tr></table></figure><h4 id="C指针的算术运算"><a href="#C指针的算术运算" class="headerlink" title="C指针的算术运算"></a>C指针的算术运算</h4><p><strong>++、–、+、-</strong></p><ul><li><p>指针的每一次递增，它其实会指向下一个元素的存储单元。</p></li><li><p>指针的每一次递减，它都会指向前一个元素的存储单元。</p></li><li><p>指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。</p></li></ul><h4 id="递增一个指针"><a href="#递增一个指针" class="headerlink" title="递增一个指针"></a>递增一个指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> var[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p;<br>p = var;<span class="hljs-comment">/* 指针中的数组地址 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%p\n&quot;</span>,i,p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%d\n&quot;</span>,i,*p);<br><br>p++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递减一个指针"><a href="#递减一个指针" class="headerlink" title="递减一个指针"></a>递减一个指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> var[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p;<br>p = &amp;var[<span class="hljs-number">2</span>];<span class="hljs-comment">/* 指针中最后一个元素的地址 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%p\n&quot;</span>,i,p);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%d\n&quot;</span>,i,*p);<br>  <br>  p--;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h4><p>指针可以使用关系运算符进行比较，例如<span class="label label-primary">==</span>、<span class="label label-primary"><</span>和<span class="label label-primary">></span>。</p><h4 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">//声明一个指针数组<br><span class="hljs-keyword">type</span> *<span class="hljs-keyword">ptr</span>[] = <span class="hljs-meta">&#123;...&#125;</span>;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>字符串实际上是使用空字符 \0 结尾的一维字符数组。因此，\0 是用于标记字符串的结束。</strong></p><p><strong>空字符（Null character</strong>）又称结束符，缩写 <strong>NUL</strong>，是一个数值为 <strong>0</strong> 的控制字符，<strong>\0</strong> 是转义字符，意思是告诉编译器，这不是字符 <strong>0</strong>，而是空字符。</p><p>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符 <strong>\0</strong>，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> site[<span class="hljs-number">7</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> site[] = <span class="hljs-string">&quot;RUNOOB&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="操作字符串的函数"><a href="#操作字符串的函数" class="headerlink" title="操作字符串的函数"></a>操作字符串的函数</h4><div class="note note-info">            <p><strong>strcpy(s1, s2);</strong></p><p>复制字符串 s2 到字符串 s1</p>          </div><div class="note note-info">            <p><strong>strcat(s1, s2);</strong></p><p>连接字符串 s2 到字符串 s1 的末尾</p>          </div><div class="note note-info">            <p><strong>strlen(s1);</strong></p><p>返回字符串 s1 的长度</p>          </div><div class="note note-info">            <p><strong>strcmp(s1,s2);</strong></p><p>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</p>          </div><div class="note note-info">            <p><strong>strchr(s1,ch);</strong></p><p>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。(截取ch及后面的字符)</p>          </div><div class="note note-info">            <p><strong>strstr(s1,s2);</strong></p><p>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</p>          </div><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p><strong>C 数组允许定义可存储相同类型数据项的变量，结构是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</strong></p><h4 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h4><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">struct tag &#123; <br><span class="hljs-code">    member-list</span><br><span class="hljs-code">    member-list </span><br><span class="hljs-code">    member-list  </span><br><span class="hljs-code">    ...</span><br><span class="hljs-code">&#125; variable-list ;</span><br><span class="hljs-code">//tag 是结构体标签。</span><br><span class="hljs-code">//member-list 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。</span><br><span class="hljs-code">//variable-list 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span>&#123;</span><br><span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> book_id;<br>&#125; book;<br></code></pre></td></tr></table></figure><h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><p><strong>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。</strong></p><h4 id="定义共用体"><a href="#定义共用体" class="headerlink" title="定义共用体"></a>定义共用体</h4><p>为了定义共用体，您必须使用 union 语句，方式与定义结构类似。union 语句定义了一个新的数据类型，带有多个成员。union 语句的格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> [<span class="hljs-title">union</span> <span class="hljs-title">tag</span>]</span><br><span class="hljs-class">&#123;</span><br>   member definition;<br>   member definition;<br>   ...<br>   member definition;<br>&#125; [one or more <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">variables</span>];</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Data</span>&#123;</span><br><span class="hljs-type">int</span> i;<br><span class="hljs-type">float</span> f;<br><span class="hljs-type">char</span> str[<span class="hljs-number">20</span>];<br>&#125; data;<br></code></pre></td></tr></table></figure><p>访问共用体成员，使用成员运算符<span class="label label-info">(.)</span></p><div class="note note-warning">            <p>在同一时间，只能使用一个类型的成员变量，否则会造成数据损坏。</p>          </div><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>C 语言提供了 typedef 关键字，您可以使用它来为类型取一个新的名字。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> BYTE;<br></code></pre></td></tr></table></figure><p>在这个类型定义之后，标识符 BYTE 可作为类型 <strong>unsigned char</strong> 的缩写，例如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">BYTE</span> b1,b2;<br></code></pre></td></tr></table></figure><p>（按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但也可以使用小写字母。）</p><p>可以使用 <strong>typedef</strong> 来为用户自定义的数据类型取一个新的名字。例如，您可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Books</span>&#123;<span class="hljs-comment">//typedef给结构体Books定义新数据类型名称Book</span><br><span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> subject[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> book_id;<br>&#125;Book;<br>Book book;<span class="hljs-comment">//使用新数据类型名称Book定义变量book</span><br></code></pre></td></tr></table></figure><h4 id="typedef-与-define"><a href="#typedef-与-define" class="headerlink" title="typedef 与 #define"></a>typedef 与 #define</h4><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p><ul><li><p><strong>typedef</strong> 仅限于为类型定义符号名称，**#define** 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</p></li><li><p><strong>typedef</strong> 是由编译器执行解释的，**#define** 语句是由预编译器进行处理的。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo fluid个人使用笔记</title>
    <link href="/2022/10/20/hexo-fluid%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/20/hexo-fluid%E4%B8%AA%E4%BA%BA%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>在Hexo+Fiuld主题搭建的个人博客使用过程中，根据用户手册，记录一些个人使用笔记。</strong></p><h3 id="修改页面图片"><a href="#修改页面图片" class="headerlink" title="修改页面图片"></a>修改页面图片</h3><p>在<code>_config.fluid.yml</code>文件中，修改对应页面的<code>banner_img</code>，图片需要保存在<code>/source/img</code>文件夹下。</p><h3 id="关闭版权声明"><a href="#关闭版权声明" class="headerlink" title="关闭版权声明"></a>关闭版权声明</h3><p>,轻度强迫症，感觉文章下面的版权声明看着十分难受，就关掉了</p><p><img src="/img/post_img/5-1.png"></p><p>在<code>_config.fluid.yml</code>文件中，<code>copyright</code>的<code>enable</code>改为<code>false</code></p><h3 id="关闭终端运行hexo命令时的效果"><a href="#关闭终端运行hexo命令时的效果" class="headerlink" title="关闭终端运行hexo命令时的效果"></a>关闭终端运行hexo命令时的效果</h3><p>关闭如下效果</p><p><img src="/img/post_img/5-2.png"></p><p>将博客目录文件夹的<code>node_modules/hexo-theme-fluid/scripts/events/lib/hello.js</code>文件中的对应效果删除即可</p><h3 id="Tag插件"><a href="#Tag插件" class="headerlink" title="Tag插件"></a>Tag插件</h3><p><strong>便签</strong></p><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选便签：</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><p><strong>行内标签</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可选Label</p><span class="label label-primary">primary</span> <span class="label label-default">default</span> <span class="label label-info">info</span><span class="label label-success">success</span> <span class="label label-warning">warning</span> <span class="label label-danger">danger</span>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fiuld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用图片作为文章标题</title>
    <link href="/2022/10/19/%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%E4%BD%9C%E4%B8%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/"/>
    <url>/2022/10/19/%E4%BD%BF%E7%94%A8%E5%9B%BE%E7%89%87%E4%BD%9C%E4%B8%BA%E6%96%87%E7%AB%A0%E6%A0%87%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fiuld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu搭建Jenkins环境自动发布Go项目</title>
    <link href="/2022/10/19/ubuntu%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Go%E9%A1%B9%E7%9B%AE/"/>
    <url>/2022/10/19/ubuntu%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Go%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="ubuntu搭建Jenkins环境"><a href="#ubuntu搭建Jenkins环境" class="headerlink" title="ubuntu搭建Jenkins环境"></a>ubuntu搭建Jenkins环境</h3><ul><li>安装Java<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo apt update<br>$ sudo apt install openjdk-11-jdk<br>$ java -version<br>//自Jenkins 2.357 和 LTS 2.361.1 起，Jenkins 需要 Java 11 或 17<br></code></pre></td></tr></table></figure></li></ul><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>]]></content>
    
    
    <categories>
      
      <category>搭建环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
      <tag>Jenkins</tag>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用Fluid主题</title>
    <link href="/2022/10/19/hexo%E4%BD%BF%E7%94%A8Fluid%E4%B8%BB%E9%A2%98/"/>
    <url>/2022/10/19/hexo%E4%BD%BF%E7%94%A8Fluid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 <a href="https://github.com/fluid-dev">Fluid-dev (opens new window)</a>负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p>预览网站：<a href="https://hexo.fluid-dev.com/">Fluid’s blog (opens new window)</a><a href="https://zkqiang.cn/">zkqiang’s blog</a></p><h3 id="搭建hexo博客"><a href="#搭建hexo博客" class="headerlink" title="搭建hexo博客"></a>搭建hexo博客</h3><p>先安装hexo，搭建hexo博客网站</p><h3 id="获取主题"><a href="#获取主题" class="headerlink" title="获取主题"></a>获取主题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h3 id="选择hexo主题"><a href="#选择hexo主题" class="headerlink" title="选择hexo主题"></a>选择hexo主题</h3><p>如下修改Hexo博客目录中的的<code>_config.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span>  <span class="hljs-comment">#指定主题</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span>  <span class="hljs-comment">#指定语言</span><br></code></pre></td></tr></table></figure><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo n page about<br></code></pre></td></tr></table></figure><p>然后修改<code>/source/about/index.md</code>文件，添加<code>layout</code>属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里填写你想在about页展示的内容</span><br></code></pre></td></tr></table></figure><blockquote><p>WARNING</p><p><code>layout: about</code>必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p></blockquote><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p><strong>方式一</strong></p><blockquote><p>适用于通过npm安装主题</p></blockquote><p>在博客目录下执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm update --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p><strong>方式二</strong></p><blockquote><p>适用于通过Release压缩包安装主题，且没有自行修改任何代码的情况</p></blockquote><ol><li>先将原文件夹重命名为别的名称，例如 <code>fluid-bkp</code>，用于升级失败进行回退；</li><li>按照安装步骤，重新下载 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">release (opens new window)</a>并解压重命名为 <code>fluid</code>；</li><li>如果某些配置发生了变化（改名或弃用），release 的说明里会特别提示，同步修改原配置文件即可。</li></ol><p><strong>方式三</strong></p><blockquote><p>适用于自定义了一些代码 ，或想体验其他分支的情况，以 dev 分支为例。</p></blockquote><ol><li><p>确定自己的 fluid 目录已经开启 git，并且所有改动都已 commit；</p></li><li><p>把 fluid 仓库的 develop 分支拉取到自己当前的分支上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git pull https://github.com/fluid-dev/hexo-theme-fluid.git develop<br></code></pre></td></tr></table></figure></li><li><p>解决代码冲突，保留自己修改的部分</p></li></ol><p>​                                                                         文章来源：<a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fiuld</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/19/hello-world/"/>
    <url>/2022/10/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>欢迎来到我的博客～</p><p>今天是第一天写博客，以后会争取每天写写博客，记录自己的编程成长过程、学习感悟～</p><h2 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h2><p>搭建博客网站使用的是hexo</p><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Postname&quot;</span> 或 $ hexo n <span class="hljs-string">&quot;My New Postname&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server 或 $ hexo s<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate 或 $ hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy 或 $ hexo d<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>清除缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean 或 $ hexo c<br></code></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/one-command-deployment.html">https://hexo.io/docs/one-command-deployment.html</a>)</p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
